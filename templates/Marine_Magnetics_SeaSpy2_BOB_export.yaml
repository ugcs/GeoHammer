  # Template display name
  name: "SeaSPY2 BOB"
  # Code of template
  code: "SeaSPY2-BOB"
  # Type of template for parsing data. Options are CSV and ColumnsFixedWidth
  file-type: CSV
  # Applies to the first 10 non-empty lines of the file to detect template
  match-regex: .*Reading_Date,.*Reading_Time,.*Field,.*Latitude,.*Longitude.*
  file-format:
  # Applies to CSV type. 'true' if file has headers, otherwise false
    has-header: true
    # The symbol which uses to make a comment
    comment-prefix: '/'
    # The symbol used to separate the integer part from the fractional part of a number written in decimal form. Options are ',' and '.'
    decimal-separator: '.'
    # Applies to CSV type. The symbol to separate values from line in CSV file;
    separator: ','
  # First Lines which do not contain any data and have to be skipped
  skip-lines-to:
    # Skip lines until the first matching is found
    match-regex: .*Reading_Date,.*Reading_Time,.*Field,.*Latitude,.*Longitude.*
    # Skip matched line or not;
    skip-matched-line: false
  # Applied on a quality check to all data values
  data-validation: '{Valid} == 1'
  # Mapping data from source file to data. Required fields are latitude, longitude, time or timestamp, date or date-time
  data-mapping:
    latitude:
      header: Latitude
    longitude:
      header: Longitude
    altitude:
      header: Altitude
    time:
      header: Reading_Time
      format: 'H:mm:ss.fff'
    date:
      header: Reading_Date
      format: 'd-MMM-yyyy'
    data-values:
      - header: "Field"
        semantic: "TMI"
        units: "nT"
      - header: "Altitude"
        semantic: "Altitude"
        units: "m"
      - header: "Depth"
        semantic: "Depth"
        units: "m"
      - header: "Line_Name"
        semantic: "Line"
        units: ""
      - header: "TMI_anomaly"
        semantic: "TMI_anomaly"
        units: "nT"

